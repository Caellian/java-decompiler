use crate::ext::ReadByteVecExt;
use byteorder::ReadBytesExt;
use num_enum::{IntoPrimitive, TryFromPrimitive};
use std::convert::TryFrom;
use std::fmt::{Display, Formatter};
use std::io::{ErrorKind, Read};

#[derive(Debug, Copy, Clone, Eq, PartialEq, IntoPrimitive, TryFromPrimitive)]
#[repr(u8)]
pub enum Op {
    Aaload = 0x32,
    Aastore = 0x53,
    AconstNull = 0x01,
    Aload = 0x19,
    Aload0 = 0x2a,
    Aload1 = 0x2b,
    Aload2 = 0x2c,
    Aload3 = 0x2d,
    Anewarray = 0xbd,
    Areturn = 0xb0,
    Arraylength = 0xbe,
    Astore = 0x3a,
    Astore0 = 0x4b,
    Astore1 = 0x4c,
    Astore2 = 0x4d,
    Astore3 = 0x4e,
    Athrow = 0xbf,
    Baload = 0x33,
    Bastore = 0x54,
    Bipush = 0x10,
    Breakpoint = 0xca,
    Caload = 0x34,
    Castore = 0x55,
    Checkcast = 0xc0,
    D2f = 0x90,
    D2i = 0x8e,
    D2l = 0x8f,
    Dadd = 0x63,
    Daload = 0x31,
    Dastore = 0x52,
    Dcmpg = 0x98,
    Dcmpl = 0x97,
    Dconst0 = 0x0e,
    Dconst1 = 0x0f,
    Ddiv = 0x6f,
    Dload = 0x18,
    Dload0 = 0x26,
    Dload1 = 0x27,
    Dload2 = 0x28,
    Dload3 = 0x29,
    Dmul = 0x6b,
    Dneg = 0x77,
    Drem = 0x73,
    Dreturn = 0xaf,
    Dstore = 0x39,
    Dstore0 = 0x47,
    Dstore1 = 0x48,
    Dstore2 = 0x49,
    Dstore3 = 0x4a,
    Dsub = 0x67,
    Dup = 0x59,
    DupX1 = 0x5a,
    DupX2 = 0x5b,
    Dup2 = 0x5c,
    Dup2X1 = 0x5d,
    Dup2X2 = 0x5e,
    F2d = 0x8d,
    F2i = 0x8b,
    F2l = 0x8c,
    Fadd = 0x62,
    Faload = 0x30,
    Fastore = 0x51,
    Fcmpg = 0x96,
    Fcmpl = 0x95,
    Fconst0 = 0x0b,
    Fconst1 = 0x0c,
    Fconst2 = 0x0d,
    Fdiv = 0x6e,
    Fload = 0x17,
    Fload0 = 0x22,
    Fload1 = 0x23,
    Fload2 = 0x24,
    Fload3 = 0x25,
    Fmul = 0x6a,
    Fneg = 0x76,
    Frem = 0x72,
    Freturn = 0xae,
    Fstore = 0x38,
    Fstore0 = 0x43,
    Fstore1 = 0x44,
    Fstore2 = 0x45,
    Fstore3 = 0x46,
    Fsub = 0x66,
    Getfield = 0xb4,
    Getstatic = 0xb2,
    Goto = 0xa7,
    GotoW = 0xc8,
    I2b = 0x91,
    I2c = 0x92,
    I2d = 0x87,
    I2f = 0x86,
    I2l = 0x85,
    I2s = 0x93,
    Iadd = 0x60,
    Iaload = 0x2e,
    Iand = 0x7e,
    Iastore = 0x4f,
    IconstM1 = 0x02,
    Iconst0 = 0x03,
    Iconst1 = 0x04,
    Iconst2 = 0x05,
    Iconst3 = 0x06,
    Iconst4 = 0x07,
    Iconst5 = 0x08,
    Idiv = 0x6c,
    IfAcmpeq = 0xa5,
    IfAcmpne = 0xa6,
    IfIcmpeq = 0x9f,
    IfIcmpge = 0xa2,
    IfIcmpgt = 0xa3,
    IfIcmple = 0xa4,
    IfIcmplt = 0xa1,
    IfIcmpne = 0xa0,
    Ifeq = 0x99,
    Ifge = 0x9c,
    Ifgt = 0x9d,
    Ifle = 0x9e,
    Iflt = 0x9b,
    Ifne = 0x9a,
    Ifnonnull = 0xc7,
    Ifnull = 0xc6,
    Iinc = 0x84,
    Iload = 0x15,
    Iload0 = 0x1a,
    Iload1 = 0x1b,
    Iload2 = 0x1c,
    Iload3 = 0x1d,
    Impdep1 = 0xfe,
    Impdep2 = 0xff,
    Imul = 0x68,
    Ineg = 0x74,
    Instanceof = 0xc1,
    Invokedynamic = 0xba,
    Invokeinterface = 0xb9,
    Invokespecial = 0xb7,
    Invokestatic = 0xb8,
    Invokevirtual = 0xb6,
    Ior = 0x80,
    Irem = 0x70,
    Ireturn = 0xac,
    Ishl = 0x78,
    Ishr = 0x7a,
    Istore = 0x36,
    Istore0 = 0x3b,
    Istore1 = 0x3c,
    Istore2 = 0x3d,
    Istore3 = 0x3e,
    Isub = 0x64,
    Iushr = 0x7c,
    Ixor = 0x82,
    L2d = 0x8a,
    L2f = 0x89,
    L2i = 0x88,
    Ladd = 0x61,
    Laload = 0x2f,
    Land = 0x7f,
    Lastore = 0x50,
    Lcmp = 0x94,
    Lconst0 = 0x09,
    Lconst1 = 0x0a,
    Ldc = 0x12,
    LdcW = 0x13,
    Ldc2W = 0x14,
    Ldiv = 0x6d,
    Lload = 0x16,
    Lload0 = 0x1e,
    Lload1 = 0x1f,
    Lload2 = 0x20,
    Lload3 = 0x21,
    Lmul = 0x69,
    Lneg = 0x75,
    Lookupswitch = 0xab,
    Lor = 0x81,
    Lrem = 0x71,
    Lreturn = 0xad,
    Lshl = 0x79,
    Lshr = 0x7b,
    Lstore = 0x37,
    Lstore0 = 0x3f,
    Lstore1 = 0x40,
    Lstore2 = 0x41,
    Lstore3 = 0x42,
    Lsub = 0x65,
    Lushr = 0x7d,
    Lxor = 0x83,
    Monitorenter = 0xc2,
    Monitorexit = 0xc3,
    Multianewarray = 0xc5,
    New = 0xbb,
    Newarray = 0xbc,
    Nop = 0x00,
    Pop = 0x57,
    Pop2 = 0x58,
    Putfield = 0xb5,
    Putstatic = 0xb3,
    Return = 0xb1,
    Saload = 0x35,
    Sastore = 0x56,
    Sipush = 0x11,
    Swap = 0x5f,
}

impl Op {
    pub fn name(&self) -> &'static str {
        match self {
            Op::Aaload => "aaload",
            Op::Aastore => "aastore",
            Op::AconstNull => "aconst_null",
            Op::Aload => "aload",
            Op::Aload0 => "aload_0",
            Op::Aload1 => "aload_1",
            Op::Aload2 => "aload_2",
            Op::Aload3 => "aload_3",
            Op::Anewarray => "anewarray",
            Op::Areturn => "areturn",
            Op::Arraylength => "arraylength",
            Op::Astore => "astore",
            Op::Astore0 => "astore_0",
            Op::Astore1 => "astore_1",
            Op::Astore2 => "astore_2",
            Op::Astore3 => "astore_3",
            Op::Athrow => "athrow",
            Op::Baload => "baload",
            Op::Bastore => "bastore",
            Op::Bipush => "bipush",
            Op::Breakpoint => "breakpoint",
            Op::Caload => "caload",
            Op::Castore => "castore",
            Op::Checkcast => "checkcast",
            Op::D2f => "d_2f",
            Op::D2i => "d_2i",
            Op::D2l => "d_2l",
            Op::Dadd => "dadd",
            Op::Daload => "daload",
            Op::Dastore => "dastore",
            Op::Dcmpg => "dcmpg",
            Op::Dcmpl => "dcmpl",
            Op::Dconst0 => "dconst_0",
            Op::Dconst1 => "dconst_1",
            Op::Ddiv => "ddiv",
            Op::Dload => "dload",
            Op::Dload0 => "dload_0",
            Op::Dload1 => "dload_1",
            Op::Dload2 => "dload_2",
            Op::Dload3 => "dload_3",
            Op::Dmul => "dmul",
            Op::Dneg => "dneg",
            Op::Drem => "drem",
            Op::Dreturn => "dreturn",
            Op::Dstore => "dstore",
            Op::Dstore0 => "dstore_0",
            Op::Dstore1 => "dstore_1",
            Op::Dstore2 => "dstore_2",
            Op::Dstore3 => "dstore_3",
            Op::Dsub => "dsub",
            Op::Dup => "dup",
            Op::DupX1 => "dupX1",
            Op::DupX2 => "dupX2",
            Op::Dup2 => "dup_2",
            Op::Dup2X1 => "dup2X1",
            Op::Dup2X2 => "dup2X2",
            Op::F2d => "f_2d",
            Op::F2i => "f_2i",
            Op::F2l => "f_2l",
            Op::Fadd => "fadd",
            Op::Faload => "faload",
            Op::Fastore => "fastore",
            Op::Fcmpg => "fcmpg",
            Op::Fcmpl => "fcmpl",
            Op::Fconst0 => "fconst_0",
            Op::Fconst1 => "fconst_1",
            Op::Fconst2 => "fconst_2",
            Op::Fdiv => "fdiv",
            Op::Fload => "fload",
            Op::Fload0 => "fload_0",
            Op::Fload1 => "fload_1",
            Op::Fload2 => "fload_2",
            Op::Fload3 => "fload_3",
            Op::Fmul => "fmul",
            Op::Fneg => "fneg",
            Op::Frem => "frem",
            Op::Freturn => "freturn",
            Op::Fstore => "fstore",
            Op::Fstore0 => "fstore_0",
            Op::Fstore1 => "fstore_1",
            Op::Fstore2 => "fstore_2",
            Op::Fstore3 => "fstore_3",
            Op::Fsub => "fsub",
            Op::Getfield => "getfield",
            Op::Getstatic => "getstatic",
            Op::Goto => "goto",
            Op::GotoW => "goto_w",
            Op::I2b => "i_2b",
            Op::I2c => "i_2c",
            Op::I2d => "i_2d",
            Op::I2f => "i_2f",
            Op::I2l => "i_2l",
            Op::I2s => "i_2s",
            Op::Iadd => "iadd",
            Op::Iaload => "iaload",
            Op::Iand => "iand",
            Op::Iastore => "iastore",
            Op::IconstM1 => "iconstM1",
            Op::Iconst0 => "iconst_0",
            Op::Iconst1 => "iconst_1",
            Op::Iconst2 => "iconst_2",
            Op::Iconst3 => "iconst_3",
            Op::Iconst4 => "iconst_4",
            Op::Iconst5 => "iconst_5",
            Op::Idiv => "idiv",
            Op::IfAcmpeq => "if_acmpeq",
            Op::IfAcmpne => "if_acmpne",
            Op::IfIcmpeq => "if_icmpeq",
            Op::IfIcmpge => "if_icmpge",
            Op::IfIcmpgt => "if_icmpgt",
            Op::IfIcmple => "if_icmple",
            Op::IfIcmplt => "if_icmplt",
            Op::IfIcmpne => "if_icmpne",
            Op::Ifeq => "ifeq",
            Op::Ifge => "ifge",
            Op::Ifgt => "ifgt",
            Op::Ifle => "ifle",
            Op::Iflt => "iflt",
            Op::Ifne => "ifne",
            Op::Ifnonnull => "ifnonnull",
            Op::Ifnull => "ifnull",
            Op::Iinc => "iinc",
            Op::Iload => "iload",
            Op::Iload0 => "iload_0",
            Op::Iload1 => "iload_1",
            Op::Iload2 => "iload_2",
            Op::Iload3 => "iload_3",
            Op::Impdep1 => "impdep_1",
            Op::Impdep2 => "impdep_2",
            Op::Imul => "imul",
            Op::Ineg => "ineg",
            Op::Instanceof => "instanceof",
            Op::Invokedynamic => "invokedynamic",
            Op::Invokeinterface => "invokeinterface",
            Op::Invokespecial => "invokespecial",
            Op::Invokestatic => "invokestatic",
            Op::Invokevirtual => "invokevirtual",
            Op::Ior => "ior",
            Op::Irem => "irem",
            Op::Ireturn => "ireturn",
            Op::Ishl => "ishl",
            Op::Ishr => "ishr",
            Op::Istore => "istore",
            Op::Istore0 => "istore_0",
            Op::Istore1 => "istore_1",
            Op::Istore2 => "istore_2",
            Op::Istore3 => "istore_3",
            Op::Isub => "isub",
            Op::Iushr => "iushr",
            Op::Ixor => "ixor",
            Op::L2d => "l_2d",
            Op::L2f => "l_2f",
            Op::L2i => "l_2i",
            Op::Ladd => "ladd",
            Op::Laload => "laload",
            Op::Land => "land",
            Op::Lastore => "lastore",
            Op::Lcmp => "lcmp",
            Op::Lconst0 => "lconst_0",
            Op::Lconst1 => "lconst_1",
            Op::Ldc => "ldc",
            Op::LdcW => "ldc_w",
            Op::Ldc2W => "ldc2W",
            Op::Ldiv => "ldiv",
            Op::Lload => "lload",
            Op::Lload0 => "lload_0",
            Op::Lload1 => "lload_1",
            Op::Lload2 => "lload_2",
            Op::Lload3 => "lload_3",
            Op::Lmul => "lmul",
            Op::Lneg => "lneg",
            Op::Lookupswitch => "lookupswitch",
            Op::Lor => "lor",
            Op::Lrem => "lrem",
            Op::Lreturn => "lreturn",
            Op::Lshl => "lshl",
            Op::Lshr => "lshr",
            Op::Lstore => "lstore",
            Op::Lstore0 => "lstore_0",
            Op::Lstore1 => "lstore_1",
            Op::Lstore2 => "lstore_2",
            Op::Lstore3 => "lstore_3",
            Op::Lsub => "lsub",
            Op::Lushr => "lushr",
            Op::Lxor => "lxor",
            Op::Monitorenter => "monitorenter",
            Op::Monitorexit => "monitorexit",
            Op::Multianewarray => "multianewarray",
            Op::New => "new",
            Op::Newarray => "newarray",
            Op::Nop => "nop",
            Op::Pop => "pop",
            Op::Pop2 => "pop_2",
            Op::Putfield => "putfield",
            Op::Putstatic => "putstatic",
            Op::Return => "return",
            Op::Saload => "saload",
            Op::Sastore => "sastore",
            Op::Sipush => "sipush",
            Op::Swap => "swap",
        }
    }

    pub fn argc(&self) -> usize {
        match self {
            Op::Aload => 1,
            Op::Anewarray => 2,
            Op::Astore => 1,
            Op::Bipush => 1,
            Op::Checkcast => 2,
            Op::Dload => 1,
            Op::Dstore => 1,
            Op::Fload => 1,
            Op::Fstore => 1,
            Op::Getfield => 2,
            Op::Getstatic => 2,
            Op::Goto => 2,
            Op::GotoW => 4,
            Op::IfAcmpeq => 2,
            Op::IfAcmpne => 2,
            Op::IfIcmpeq => 2,
            Op::IfIcmpge => 2,
            Op::IfIcmpgt => 2,
            Op::IfIcmple => 2,
            Op::IfIcmplt => 2,
            Op::IfIcmpne => 2,
            Op::Ifeq => 2,
            Op::Ifge => 2,
            Op::Ifgt => 2,
            Op::Ifle => 2,
            Op::Iflt => 2,
            Op::Ifne => 2,
            Op::Ifnonnull => 2,
            Op::Ifnull => 2,
            Op::Iinc => 2,
            Op::Iload => 1,
            Op::Instanceof => 2,
            Op::Invokedynamic => 4,
            Op::Invokeinterface => 4,
            Op::Invokespecial => 2,
            Op::Invokestatic => 2,
            Op::Invokevirtual => 2,
            Op::Istore => 1,
            Op::Ldc => 1,
            Op::LdcW => 2,
            Op::Ldc2W => 2,
            Op::Lload => 1,
            Op::Lstore => 1,
            Op::Multianewarray => 3,
            Op::New => 2,
            Op::Newarray => 1,
            Op::Putfield => 2,
            Op::Putstatic => 2,
            Op::Sipush => 2,
            _ => 0,
        }
    }
}

impl Display for Op {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.name())
    }
}

#[derive(Clone, Eq, PartialEq)]
pub struct Instruction {
    pub op: Op,
    pub args: Vec<u8>,
}

impl Instruction {
    pub fn read_from<R: Read>(r: &mut R) -> Result<Instruction, std::io::Error> {
        let op = Op::try_from(r.read_u8()?)
            .map_err(|e| std::io::Error::new(ErrorKind::InvalidData, e))?;

        let args = r.read_byte_vec(op.argc())?;

        Ok(Instruction { op, args })
    }
}
